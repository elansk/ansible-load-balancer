#!/bin/sh

# This script watches for new SSL certificates or changes to the haproxy
# configuration files and triggers a reload of haproxy.  The actual reload
# is performed by the haproxy-reload script.

# Name of file that indicates haproxy needs to be reloaded.
HAPROXY_RELOAD_FILE="{{ LOAD_BALANCER_RELOAD_FILE }}"

update_cert()
{
    # This is called when a new certificate was obtained by letsencrypt, either
    # due to periodic renewal or because a new domain was added.  Letsencrypt
    # writes four .pem files for each certificate.  We wait for the last one,
    # fullchain.pem, to be closed before taking action.
    case "$2" in
        fullchain*)
            domain="${1#/etc/letsencrypt/archive/}"
            domain="${domain%/}"
            cd /etc/letsencrypt/live/"$domain"
            # Haproxy expects the certificate and the private key concatenated
            # together to a single .pem file.
            cat fullchain.pem privkey.pem > "/etc/haproxy/certs/$domain.pem"
            touch "$HAPROXY_RELOAD_FILE"
            ;;
    esac
}

# We exclude haproxy.cfg and backend.map from being watched since they are
# regenerated whenever a restart is requested.  Otherwise, each restart would
# immediately trigger another restart.
inotifywait -e close_write -e moved_to -m -q -r \
            --exclude haproxy.cfg --exclude backend.map \
            /etc/letsencrypt/archive /etc/haproxy |
    while read path event file; do
        case "$path" in
            /etc/letsencrypt/archive/*) update_cert "$path" "$file";;
            /etc/haproxy/*) touch "$HAPROXY_RELOAD_FILE";;
        esac
    done
